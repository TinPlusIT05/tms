diff --git a/openerp/addons/base/ir/ir_actions.py b/openerp/addons/base/ir/ir_actions.py
index 3733fc5006a23..9dd93179a4da4 100644
--- a/openerp/addons/base/ir/ir_actions.py
+++ b/openerp/addons/base/ir/ir_actions.py
@@ -25,7 +25,6 @@
 import os
 import time
 import datetime
-import dateutil
 import pytz
 
 import openerp
@@ -37,6 +36,7 @@
 from openerp.osv.orm import browse_record
 import openerp.report.interface
 from openerp.report.report_sxw import report_sxw, report_rml
+from openerp.tools import wrap_module
 from openerp.tools.safe_eval import safe_eval as eval
 from openerp.tools.translate import _
 import openerp.workflow
@@ -44,6 +44,16 @@
 _logger = logging.getLogger(__name__)
 
 
+# build dateutil helper, starting with the relevant *lazy* imports
+import dateutil
+import dateutil.parser
+import dateutil.relativedelta
+import dateutil.rrule
+import dateutil.tz
+mods = {'parser', 'relativedelta', 'rrule', 'tz'}
+attribs = {atr for m in mods for atr in getattr(dateutil, m).__all__}
+dateutil = wrap_module(dateutil, mods | attribs)
+
 class actions(osv.osv):
     _name = 'ir.actions.actions'
     _table = 'ir_actions'
diff --git a/openerp/tools/misc.py b/openerp/tools/misc.py
index bed509298cf42..a4cd06cbcc039 100644
--- a/openerp/tools/misc.py
+++ b/openerp/tools/misc.py
@@ -36,6 +36,7 @@
 import sys
 import threading
 import time
+import types
 import werkzeug.utils
 import zipfile
 from cStringIO import StringIO
@@ -1335,4 +1336,22 @@ def loads(cls, text):
 
 pickle = Pickle
 
-# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
+def wrap_module(module, attr_list):
+    """Helper for wrapping a package/module to expose selected attributes
+
+       :param Module module: the actual package/module to wrap, as returned by ``import <module>``
+       :param iterable attr_list: a global list of attributes to expose, usually the top-level
+            attributes and their own main attributes. No support for hiding attributes in case
+            of name collision at different levels.
+    """
+    attr_list = set(attr_list)
+    class WrappedModule(object):
+        def __getattr__(self, attrib):
+            if attrib in attr_list:
+                target = getattr(module, attrib)
+                if isinstance(target, types.ModuleType):
+                    return wrap_module(target, attr_list)
+                return target
+            raise AttributeError(attrib)
+    # module and attr_list are in the closure
+    return WrappedModule()
