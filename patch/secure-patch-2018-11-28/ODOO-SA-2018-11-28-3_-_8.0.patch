From ab9e6114e1403f0cee2f355ce68c904694a0ce80 Mon Sep 17 00:00:00 2001
From: XavierDo <xdo@odoo.com>
Date: Fri, 2 Nov 2018 11:23:10 +0100
Subject: [PATCH] [FIX] mail: verify attachment access early to avoid errors
 later

---
 addons/mail/mail_mail.py    | 14 +++++++++++++-
 addons/mail/mail_message.py |  8 +++++++-
 2 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/addons/mail/mail_mail.py b/addons/mail/mail_mail.py
index 94ce3cef08b9e..4d9d0760c68f2 100644
--- a/addons/mail/mail_mail.py
+++ b/addons/mail/mail_mail.py
@@ -83,7 +83,19 @@ def create(self, cr, uid, values, context=None):
         # notification field: if not set, set if mail comes from an existing mail.message
         if 'notification' not in values and values.get('mail_message_id'):
             values['notification'] = True
-        return super(mail_mail, self).create(cr, uid, values, context=context)
+        new_mail_id = super(mail_mail, self).create(cr, uid, values, context=context)
+        if values.get('attachment_ids'):
+            new_mail = self.browse(cr, uid, new_mail_id, context=context)
+            self.pool['ir.attachment'].check(cr, uid, new_mail.attachment_ids.ids, mode='read', context=context)
+        return new_mail_id
+
+    @api.multi
+    def write(self, vals):
+        res = super(mail_mail, self).write(vals)
+        if vals.get('attachment_ids'):
+            for mail in self:
+                mail.attachment_ids.check(mode='read')
+        return res
 
     def unlink(self, cr, uid, ids, context=None):
         # cascade-delete the parent message for all mails that are not created for a notification
diff --git a/addons/mail/mail_message.py b/addons/mail/mail_message.py
index 69b5bbdf67007..36430a0c9c045 100644
--- a/addons/mail/mail_message.py
+++ b/addons/mail/mail_message.py
@@ -812,7 +812,10 @@ def create(self, cr, uid, values, context=None):
             values['record_name'] = self._get_record_name(cr, uid, values, context=context)
 
         newid = super(mail_message, self).create(cr, uid, values, context)
-        self.browse(cr, uid, newid, context)._invalidate_documents()
+        new_mail = self.browse(cr, uid, newid, context=context)
+        if values.get('attachment_ids'):
+            self.pool['ir.attachment'].check(cr, uid, new_mail.attachment_ids.ids, mode='read', context=context)
+        new_mail._invalidate_documents()
 
         self._notify(cr, uid, newid, context=context,
                      force_send=context.get('mail_notify_force_send', True),
@@ -839,6 +842,9 @@ def write(self, vals):
         if 'model' in vals or 'res_id' in vals:
             self._invalidate_documents()
         res = super(mail_message, self).write(vals)
+        if vals.get('attachment_ids'):
+            for mail in self:
+                mail.attachment_ids.check(mode='read')
         self._invalidate_documents()
         return res
 
